name: Packer Build

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-ami:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER_1 }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_HOST: ${{ secrets.DB_HOST }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          cd src
          npm install

      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Debug MySQL Connection
        run: |
          mysql -h 127.0.0.1 -uroot -p${{ secrets.DB_ROOT_PASSWORD }} -e "SHOW DATABASES;"

      - name: Initialize MySQL Database as Root
        run: |
          mysql -h 127.0.0.1 -uroot -p${{ secrets.DB_ROOT_PASSWORD }} <<EOF
          CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};
          CREATE USER IF NOT EXISTS '${{ secrets.DB_USER_1 }}'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
          GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO '${{ secrets.DB_USER_1 }}'@'%';
          ALTER USER '${{ secrets.DB_USER_1 }}'@'%' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DB_PASSWORD }}';
          FLUSH PRIVILEGES;
          EOF

      - name: Set Environment Variables for Tests
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> src/.env
          echo "DB_USER=${{ secrets.DB_USER_1 }}" >> src/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> src/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> src/.env

      - name: Run Tests
        run: |
          cd src
          npm test

  build-aws-ami:
    needs: build-ami
    runs-on: ubuntu-latest
    name: Packer Build
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_INSTANCE_TYPE: ${{ secrets.AWS_INSTANCE_TYPE }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      AMI_NAME_PREFIX: ${{ secrets.AMI_NAME_PREFIX }}
      UBUNTU_AMI_OWNER: ${{ secrets.UBUNTU_AMI_OWNER }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
      SOURCE_IMAGE_FAMILY: ${{ secrets.SOURCE_IMAGE_FAMILY }}
      DELETE_ON_TERMINATION: ${{ secrets.DELETE_ON_TERMINATION }}
      DEVICE_NAME: ${{ secrets.DEVICE_NAME }}
      VOLUME_SIZE: ${{ secrets.VOLUME_SIZE }}
      VOLUME_TYPE: ${{ secrets.VOLUME_TYPE }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_ZONE: ${{ secrets.GCP_ZONE }}
      DISK_SIZE: ${{ secrets.DISK_SIZE }}
      DISK_TYPE: ${{ secrets.DISK_TYPE }}
      GCP_CREDENTIALS_FILE: ${{ secrets.GCP_CREDENTIALS_FILE }}
      GCP_DEMO_PROJECT_NUMBER: ${{ secrets.GCP_DEMO_PROJECT_NUMBER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Install and Configure gcloud CLI
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS_FILE }}'
      #     export_default_credentials: true


      - name: Create webapp.zip from existing directory
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          zip -r webapp.zip .
        shell: bash

      - name: Copy webapp.zip to packer directory
        run: cp webapp.zip ./src/packer/

      - name: Run packer init
        working-directory: ./src/packer
        id: init
        run: packer init packer.pkr.hcl

      - name: Run packer validate
        working-directory: ./src/packer
        id: validate
        run: packer validate packer.pkr.hcl

      - name: Build AMI
        working-directory: ./src/packer
        run: packer build packer.pkr.hcl

      # - name: Get Image Name
      #   run: |
      #     IMAGE_NAME=$(gcloud compute images list --project=${{ secrets.GCP_PROJECT_ID }} --sort-by=~creationTimestamp --limit=1 --format="value(NAME)")
      #     echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
 
      # - name: Share Image with DEMO Project
      #   run: |
      #     echo "Sharing image $IMAGE_NAME with DEMO project"
      #     gcloud compute images add-iam-policy-binding $IMAGE_NAME \
      #       --project=${{ secrets.GCP_PROJECT_ID }} \
      #       --member="serviceAccount:${{ secrets.GCP_DEMO_PROJECT_NUMBER }}-compute@developer.gserviceaccount.com" \
      #       --role=roles/compute.imageUser

      # -------------------- INSTANCE REFRESH UPDATE -----------------------
      
      # - name: Get Latest AMI ID
      #   id: ami_id
      #   run: |
      #     AMI_ID=$(aws ec2 describe-images \
      #       --owners ${{ secrets.AWS_ACCOUNT_ID }} \
      #       --filters "Name=name,Values=${{ secrets.AMI_NAME_PREFIX }}*" \
      #       --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
      #       --output text)
      #     echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      #     echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      # - name: Share AMI with DEMO Account
      #   run: |
      #     aws ec2 modify-image-attribute \
      #       --image-id ${{ steps.ami_id.outputs.ami_id }} \
      #       --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]"

      # - name: Reconfigure AWS CLI for DEMO account
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Create New Launch Template Version
      #   id: lt_version
      #   run: |
      #     NEW_VERSION=$(aws ec2 create-launch-template-version \
      #       --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
      #       --source-version 1 \
      #       --launch-template-data "{\"ImageId\":\"${{ steps.ami_id.outputs.ami_id }}\"}" \
      #       --query 'LaunchTemplateVersion.VersionNumber' \
      #       --output text)
      #     echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # - name: Update Auto Scaling Group to Use Latest Launch Template Version
      #   run: |
      #     aws autoscaling update-auto-scaling-group \
      #       --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #       --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ steps.lt_version.outputs.version }}"

      # - name: Start Instance Refresh
      #   id: refresh
      #   run: |
      #     REFRESH_ID=$(aws autoscaling start-instance-refresh \
      #       --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #       --query 'InstanceRefreshId' \
      #       --output text)
      #     echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      # - name: Wait for Instance Refresh to Complete
      #   run: |
      #     STATUS=""
      #     while true; do
      #       STATUS=$(aws autoscaling describe-instance-refreshes \
      #         --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #         --instance-refresh-ids ${{ steps.refresh.outputs.refresh_id }} \
      #         --query 'InstanceRefreshes[0].Status' \
      #         --output text)

      #       echo "Current status: $STATUS"
      #       if [[ "$STATUS" == "Successful" ]]; then
      #         echo "Instance refresh completed successfully."
      #         break
      #       elif [[ "$STATUS" == "Cancelled" || "$STATUS" == "Failed" ]]; then
      #         echo "Instance refresh failed or was cancelled."
      #         exit 1
      #       fi
      #       sleep 30
      #     done


